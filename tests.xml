<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="43" hostname="John-Murphy" name="pytest" skipped="52" tests="286" time="29.811" timestamp="2020-03-11T14:30:02.133194"><testcase classname="tests.test_neptune" file="tests/test_neptune.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.test_neptune" file="tests/test_neptune.py" name="mypy" time="0.270"><system-err>2020-03-11 14:30:09,277 - filelock - INFO - Lock 4604391568 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:09,546 - filelock - INFO - Lock 4604391568 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.test_neptune" file="tests/test_neptune.py" line="2" name="test_import" time="0.001"></testcase><testcase classname="tests.command.test_deploycommand" file="tests/command/test_deploycommand.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.command.test_deploycommand" file="tests/command/test_deploycommand.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:09,551 - filelock - INFO - Lock 4660360976 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:09,551 - filelock - INFO - Lock 4660360976 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.command.test_deploycommand.TestDeployCommand" file="tests/command/test_deploycommand.py" line="22" name="test_run_uses_temp_dir" time="0.005"></testcase><testcase classname="tests.command.test_localcommand" file="tests/command/test_localcommand.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.command.test_localcommand" file="tests/command/test_localcommand.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:09,561 - filelock - INFO - Lock 4662031632 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:09,561 - filelock - INFO - Lock 4662031632 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.command.test_localcommand.TestLocalCommand" file="tests/command/test_localcommand.py" line="23" name="test_run_uses_temp_dir" time="0.005"></testcase><testcase classname="tests.command.test_purgecommand" file="tests/command/test_purgecommand.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.command.test_purgecommand" file="tests/command/test_purgecommand.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:09,571 - filelock - INFO - Lock 4661758224 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:09,571 - filelock - INFO - Lock 4661758224 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.command.test_purgecommand.TestDeployCommand" file="tests/command/test_purgecommand.py" line="13" name="test_fail_with_soft_error" time="0.002"></testcase><testcase classname="tests.config.test_config" file="tests/config/test_config.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.config.test_config" file="tests/config/test_config.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:09,577 - filelock - INFO - Lock 4661330896 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:09,577 - filelock - INFO - Lock 4661330896 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.config.test_config.TestConfig" file="tests/config/test_config.py" line="12" name="test_config_dir" time="0.002"></testcase><testcase classname="tests.config.test_config.TestConfig" file="tests/config/test_config.py" line="16" name="test_head" time="0.017"></testcase><testcase classname="tests.config.test_deployerconfig" file="tests/config/test_deployerconfig.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.config.test_deployerconfig" file="tests/config/test_deployerconfig.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:09,602 - filelock - INFO - Lock 4661266832 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:09,602 - filelock - INFO - Lock 4661266832 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.config.test_deployerconfig.TestDeployerConfig" file="tests/config/test_deployerconfig.py" line="10" name="test_lkg_version" time="0.002"></testcase><testcase classname="tests.config.test_provisionerconfig" file="tests/config/test_provisionerconfig.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.config.test_provisionerconfig" file="tests/config/test_provisionerconfig.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:09,608 - filelock - INFO - Lock 4661214608 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:09,609 - filelock - INFO - Lock 4661214608 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.config.test_provisionerconfig.TestProvisionerConfig" file="tests/config/test_provisionerconfig.py" line="14" name="test_size_dir" time="0.002"></testcase><testcase classname="tests.config.test_provisionerconfig.TestProvisionerConfig" file="tests/config/test_provisionerconfig.py" line="19" name="test_size_fallback" time="0.002"></testcase><testcase classname="tests.credentialstore.test_credentialstore" file="tests/credentialstore/test_credentialstore.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.credentialstore.test_credentialstore" file="tests/credentialstore/test_credentialstore.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:09,619 - filelock - INFO - Lock 4661032592 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:09,619 - filelock - INFO - Lock 4661032592 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.credentialstore.test_credentialstore.TestCredentialStore" file="tests/credentialstore/test_credentialstore.py" line="17" name="test_deployer_key_generation" time="0.293"><system-err>2020-03-11 14:30:09,660 - botocore.credentials - INFO - Found credentials in shared credentials file: ~/.aws/credentials
</system-err></testcase><testcase classname="tests.credentialstore.test_credentialstore.TestDynamoCredentialStore" file="tests/credentialstore/test_credentialstore.py" line="70" name="test_dynamo_deployer_key" time="0.008"></testcase><testcase classname="tests.credentialstore.test_credentialstore.TestDynamoCredentialStore" file="tests/credentialstore/test_credentialstore.py" line="62" name="test_dynamo_init" time="0.007"></testcase><testcase classname="tests.credentialstore.test_credentialstore.TestDynamoCredentialStore" file="tests/credentialstore/test_credentialstore.py" line="109" name="test_dynamo_persist_deployer_keys" time="0.010"></testcase><testcase classname="tests.credentialstore.test_credentialstore.TestDynamoCredentialStore" file="tests/credentialstore/test_credentialstore.py" line="98" name="test_dynamo_remove_deployer_key" time="0.008"></testcase><testcase classname="tests.credentialstore.test_credentialstore.TestDynamoCredentialStore" file="tests/credentialstore/test_credentialstore.py" line="84" name="test_public_dynamo_deployer_key" time="0.008"></testcase><testcase classname="tests.deploy.test_deploy" file="tests/deploy/test_deploy.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.deploy.test_deploy" file="tests/deploy/test_deploy.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:09,963 - filelock - INFO - Lock 4668554192 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:09,964 - filelock - INFO - Lock 4668554192 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.deploy.test_deploy.TestDeploy" file="tests/deploy/test_deploy.py" line="48" name="test_app_transform_component" time="0.008"></testcase><testcase classname="tests.deploy.test_deploy.TestDeploy" file="tests/deploy/test_deploy.py" line="112" name="test_app_transform_no_additional_var_files" time="0.005"></testcase><testcase classname="tests.deploy.test_deploy.TestDeploy" file="tests/deploy/test_deploy.py" line="128" name="test_app_transform_on_v1" time="0.004"></testcase><testcase classname="tests.deploy.test_deploy.TestDeploy" file="tests/deploy/test_deploy.py" line="88" name="test_app_transform_stack_component_dev" time="0.007"></testcase><testcase classname="tests.deploy.test_deploy.TestDeploy" file="tests/deploy/test_deploy.py" line="64" name="test_app_transform_stack_component_non_dev" time="0.006"></testcase><testcase classname="tests.deploy.test_deploy.TestDeploy" file="tests/deploy/test_deploy.py" line="38" name="test_init" time="0.011"></testcase><testcase classname="tests.emailer.test_emailer" file="tests/emailer/test_emailer.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.emailer.test_emailer" file="tests/emailer/test_emailer.py" name="mypy" time="0.002"><system-err>2020-03-11 14:30:10,018 - filelock - INFO - Lock 4668874448 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:10,018 - filelock - INFO - Lock 4668874448 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.emailer.test_emailer.TestEmailer" file="tests/emailer/test_emailer.py" line="18" name="test_init" time="0.001"></testcase><testcase classname="tests.emailer.test_emailer.TestEmailer" file="tests/emailer/test_emailer.py" line="23" name="test_send_expiry_notice_no_metadata_throws" time="0.001"></testcase><testcase classname="tests.emailer.test_emailer.TestEmailer" file="tests/emailer/test_emailer.py" line="31" name="test_send_expiry_notice_returns_false_if_already_sent" time="0.001"></testcase><testcase classname="tests.emailer.test_emailer.TestEmailer" file="tests/emailer/test_emailer.py" line="45" name="test_send_expiry_notice_returns_true_and_sends_email" time="0.003"></testcase><testcase classname="tests.manifest.test_manifest" file="tests/manifest/test_manifest.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.manifest.test_manifest" file="tests/manifest/test_manifest.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:10,033 - filelock - INFO - Lock 4669254992 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:10,034 - filelock - INFO - Lock 4669254992 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="158" name="test_delete_from_dynamo" time="0.501"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_manifest.TestManifest testMethod=test_delete_from_dynamo&gt;

    @mock_dynamodb2
    def test_delete_from_dynamo(self):
        &quot;&quot;&quot; Unit test to delete from Dynamodb &quot;&quot;&quot;
&gt;       create_table(self.dynamodb, self.table_name)

tests/manifest/test_manifest.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/manifest/test_manifest.py:82: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x11669b9d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:10,534 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="227" name="test_delitem_implementation" time="0.005"></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="291" name="test_filter" time="0.006"></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="104" name="test_from_json" time="0.006"></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="211" name="test_getitem_implementation" time="0.005"></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="234" name="test_iter_implementation" time="0.006"></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="242" name="test_len_implementation" time="0.006"></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="182" name="test_load_manifest_from_dynamo" time="0.232"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_manifest.TestManifest testMethod=test_load_manifest_from_dynamo&gt;

    @mock_dynamodb2
    def test_load_manifest_from_dynamo(self):
        &quot;&quot;&quot; Unit test to load Manifest from Dynamodb &quot;&quot;&quot;
&gt;       create_table(self.dynamodb, self.table_name)

tests/manifest/test_manifest.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/manifest/test_manifest.py:82: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116a2c0d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:11,270 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="195" name="test_overlay" time="0.232"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_manifest.TestManifest testMethod=test_overlay&gt;

    @mock_dynamodb2
    def test_overlay(self):
        &quot;&quot;&quot; Test Manifest Overlay method &quot;&quot;&quot;
&gt;       create_table(self.dynamodb, self.table_name)

tests/manifest/test_manifest.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/manifest/test_manifest.py:82: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116862990&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:11,688 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="114" name="test_save_to_dynamo" time="0.228"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_manifest.TestManifest testMethod=test_save_to_dynamo&gt;

    @mock_dynamodb2
    def test_save_to_dynamo(self):
        &quot;&quot;&quot; Unit test for Save to Dynamodb &quot;&quot;&quot;
&gt;       create_table(self.dynamodb, self.table_name)

tests/manifest/test_manifest.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/manifest/test_manifest.py:82: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1169622d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:12,074 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="135" name="test_save_to_dynamo_excludes_empty_component_versions" time="0.223"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_manifest.TestManifest testMethod=test_save_to_dynamo_excludes_empty_component_versions&gt;

    @mock_dynamodb2
    def test_save_to_dynamo_excludes_empty_component_versions(self):
        &quot;&quot;&quot; Ensure components without versions are not saved to dynamo &quot;&quot;&quot;
&gt;       create_table(self.dynamodb, self.table_name)

tests/manifest/test_manifest.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/manifest/test_manifest.py:82: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116b9db90&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:12,460 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="247" name="test_set_and_unset" time="0.223"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_manifest.TestManifest testMethod=test_set_and_unset&gt;

    @mock_dynamodb2
    def test_set_and_unset(self):
        &quot;&quot;&quot; Test manifest set and unset methods &quot;&quot;&quot;
&gt;       create_table(self.dynamodb, self.table_name)

tests/manifest/test_manifest.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/manifest/test_manifest.py:82: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1168cd8d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:12,871 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="218" name="test_setitem_implementation" time="0.005"></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="92" name="test_to_list" time="0.005"></testcase><testcase classname="tests.manifest.test_manifest.TestManifest" file="tests/manifest/test_manifest.py" line="98" name="test_to_lkg" time="0.006"></testcase><testcase classname="tests.provisioner.test_provisioner" file="tests/provisioner/test_provisioner.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.provisioner.test_provisioner" file="tests/provisioner/test_provisioner.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:13,075 - filelock - INFO - Lock 4676762960 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:13,075 - filelock - INFO - Lock 4676762960 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.provisioner.test_provisioner.TestProvisioner" file="tests/provisioner/test_provisioner.py" line="138" name="test_destroy_terraform" time="0.005"><system-err>2020-03-11 14:30:13,080 - rally.neptune.tenant.provisioner - INFO - Set TF_DATA_DIR env variable to a value: /var/tmp/terraform-data-dir/my_tenant
2020-03-11 14:30:13,080 - rally.neptune.tenant.provisioner - INFO - Creating TF_DATA_DIR: /var/tmp/terraform-data-dir/my_tenant directory.
</system-err></testcase><testcase classname="tests.provisioner.test_provisioner.TestProvisioner" file="tests/provisioner/test_provisioner.py" line="174" name="test_destroy_terraform_bad_ref" time="0.005"><system-err>2020-03-11 14:30:13,086 - rally.neptune.tenant.provisioner - INFO - Set TF_DATA_DIR env variable to a value: /var/tmp/terraform-data-dir/my_tenant
2020-03-11 14:30:13,086 - rally.neptune.tenant.provisioner - INFO - Creating TF_DATA_DIR: /var/tmp/terraform-data-dir/my_tenant directory.
</system-err></testcase><testcase classname="tests.provisioner.test_provisioner.TestProvisioner" file="tests/provisioner/test_provisioner.py" line="208" name="test_provision_persistence" time="0.019"><system-err>2020-03-11 14:30:13,105 - rally.neptune.tenant.provisioner - INFO - Set TF_DATA_DIR env variable to a value: /var/tmp/terraform-data-dir/my_tenant
2020-03-11 14:30:13,105 - rally.neptune.tenant.provisioner - INFO - Creating TF_DATA_DIR: /var/tmp/terraform-data-dir/my_tenant directory.
</system-err></testcase><testcase classname="tests.provisioner.test_provisioner.TestProvisioner" file="tests/provisioner/test_provisioner.py" line="85" name="test_provision_terraform" time="0.019"><system-err>2020-03-11 14:30:13,126 - rally.neptune.tenant.provisioner - INFO - Set TF_DATA_DIR env variable to a value: /var/tmp/terraform-data-dir/my_tenant
2020-03-11 14:30:13,126 - rally.neptune.tenant.provisioner - INFO - Creating TF_DATA_DIR: /var/tmp/terraform-data-dir/my_tenant directory.
</system-err></testcase><testcase classname="tests.provisioner.test_provisioner.TestProvisioner" file="tests/provisioner/test_provisioner.py" line="54" name="test_provision_terraform_dry_run" time="0.020"><system-err>2020-03-11 14:30:13,148 - rally.neptune.tenant.provisioner - INFO - Set TF_DATA_DIR env variable to a value: /var/tmp/terraform-data-dir/my_tenant
2020-03-11 14:30:13,148 - rally.neptune.tenant.provisioner - INFO - Creating TF_DATA_DIR: /var/tmp/terraform-data-dir/my_tenant directory.
</system-err></testcase><testcase classname="tests.provisioner.test_provisioner.TestProvisioner" file="tests/provisioner/test_provisioner.py" line="115" name="test_provision_terraform_exception" time="0.021"><system-err>2020-03-11 14:30:13,170 - rally.neptune.tenant.provisioner - INFO - Set TF_DATA_DIR env variable to a value: /var/tmp/terraform-data-dir/my_tenant
2020-03-11 14:30:13,171 - rally.neptune.tenant.provisioner - INFO - Creating TF_DATA_DIR: /var/tmp/terraform-data-dir/my_tenant directory.
</system-err></testcase><testcase classname="tests.realm.test_realm" file="tests/realm/test_realm.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.realm.test_realm" file="tests/realm/test_realm.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:13,179 - filelock - INFO - Lock 4677109072 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:13,180 - filelock - INFO - Lock 4677109072 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.realm.test_realm.TestRealm" file="tests/realm/test_realm.py" line="31" name="test_add_tenant" time="0.001"></testcase><testcase classname="tests.realm.test_realm.TestRealm" file="tests/realm/test_realm.py" line="11" name="test_init" time="0.001"></testcase><testcase classname="tests.realm.test_realm.TestRealm" file="tests/realm/test_realm.py" line="17" name="test_init_default_tenants" time="0.001"></testcase><testcase classname="tests.realm.test_realm.TestRealm" file="tests/realm/test_realm.py" line="22" name="test_tenants_copy" time="0.001"></testcase><testcase classname="tests.realm.test_realm_store" file="tests/realm/test_realm_store.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.realm.test_realm_store" file="tests/realm/test_realm_store.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:13,191 - filelock - INFO - Lock 4677122832 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:13,192 - filelock - INFO - Lock 4677122832 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.realm.test_realm_store.TestDynamoRealmStore" file="tests/realm/test_realm_store.py" line="30" name="test_allow_stack_deploy" time="0.002"></testcase><testcase classname="tests.realm.test_realm_store.TestDynamoRealmStore" file="tests/realm/test_realm_store.py" line="34" name="test_allow_stack_deploy_invalid_realm" time="0.002"></testcase><testcase classname="tests.realm.test_realm_store.TestDynamoRealmStore" file="tests/realm/test_realm_store.py" line="40" name="test_get_realm_by_name" time="0.002"></testcase><testcase classname="tests.realm.test_realm_store.TestDynamoRealmStore" file="tests/realm/test_realm_store.py" line="47" name="test_get_realm_by_tenant" time="0.002"></testcase><testcase classname="tests.realm.test_realm_store.TestDynamoRealmStore" file="tests/realm/test_realm_store.py" line="63" name="test_get_vpcs" time="0.002"></testcase><testcase classname="tests.realm.test_realm_store.TestDynamoRealmStore" file="tests/realm/test_realm_store.py" line="68" name="test_save" time="0.002"></testcase><testcase classname="tests.realm.test_realm_store.TestMemoryRealmStore" file="tests/realm/test_realm_store.py" line="84" name="test_allow_stack_deploy" time="0.001"></testcase><testcase classname="tests.realm.test_realm_store.TestMemoryRealmStore" file="tests/realm/test_realm_store.py" line="90" name="test_get_realm_by_name" time="0.001"></testcase><testcase classname="tests.realm.test_realm_store.TestMemoryRealmStore" file="tests/realm/test_realm_store.py" line="96" name="test_get_realm_by_tenant" time="0.001"></testcase><testcase classname="tests.realm.test_realm_store.TestMemoryRealmStore" file="tests/realm/test_realm_store.py" line="104" name="test_get_vpcs" time="0.001"></testcase><testcase classname="tests.realm.test_realm_store.TestMemoryRealmStore" file="tests/realm/test_realm_store.py" line="109" name="test_save" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter" file="tests/reporting/test_reporter.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.reporting.test_reporter" file="tests/reporting/test_reporter.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:13,222 - filelock - INFO - Lock 4678645776 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:13,223 - filelock - INFO - Lock 4678645776 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.reporting.test_reporter.TestSplunkReporter" file="tests/reporting/test_reporter.py" line="65" name="test_connection_error" time="0.002"></testcase><testcase classname="tests.reporting.test_reporter.TestSplunkReporter" file="tests/reporting/test_reporter.py" line="42" name="test_init_with_keys" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter.TestSplunkReporter" file="tests/reporting/test_reporter.py" line="22" name="test_init_without_keys" time="0.003"></testcase><testcase classname="tests.reporting.test_reporter.TestSplunkReporter" file="tests/reporting/test_reporter.py" line="54" name="test_report_point_in_time_metric_throws" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter.TestDeployReporter" file="tests/reporting/test_reporter.py" line="89" name="test_init" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter.TestDeployReporter" file="tests/reporting/test_reporter.py" line="96" name="test_record_failed_deploy" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter.TestDeployReporter" file="tests/reporting/test_reporter.py" line="147" name="test_record_stack_info" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter.TestDeployReporter" file="tests/reporting/test_reporter.py" line="130" name="test_record_successful_deploy" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter.TestDeployReporter" file="tests/reporting/test_reporter.py" line="113" name="test_record_timeout_deploy" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter.TestDeployReporter" file="tests/reporting/test_reporter.py" line="154" name="test_send_deploy_report" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter.TestDatadogReporter" file="tests/reporting/test_reporter.py" line="302" name="test_event_connection_error" time="0.002"></testcase><testcase classname="tests.reporting.test_reporter.TestDatadogReporter" file="tests/reporting/test_reporter.py" line="256" name="test_get_tags_list_returns_tags" time="0.002"></testcase><testcase classname="tests.reporting.test_reporter.TestDatadogReporter" file="tests/reporting/test_reporter.py" line="204" name="test_get_user_returns_env_var_user_if_exists" time="0.002"></testcase><testcase classname="tests.reporting.test_reporter.TestDatadogReporter" file="tests/reporting/test_reporter.py" line="220" name="test_get_user_returns_jenkins_if_no_user_and_jenkins" time="0.002"></testcase><testcase classname="tests.reporting.test_reporter.TestDatadogReporter" file="tests/reporting/test_reporter.py" line="238" name="test_get_user_returns_unknown_if_no_user_and_no_jenkins" time="0.002"></testcase><testcase classname="tests.reporting.test_reporter.TestDatadogReporter" file="tests/reporting/test_reporter.py" line="192" name="test_init_with_keys" time="0.001"></testcase><testcase classname="tests.reporting.test_reporter.TestDatadogReporter" file="tests/reporting/test_reporter.py" line="172" name="test_init_without_keys" time="0.002"></testcase><testcase classname="tests.reporting.test_reporter.TestDatadogReporter" file="tests/reporting/test_reporter.py" line="282" name="test_metric_connection_error" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant" file="tests/tenant/test_tenant.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="tests.tenant.test_tenant" file="tests/tenant/test_tenant.py" name="mypy" time="0.002"><system-err>2020-03-11 14:30:13,274 - filelock - INFO - Lock 4678149648 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:13,274 - filelock - INFO - Lock 4678149648 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="424" name="test_add_to_pool" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="439" name="test_add_to_pool_already_in_pool" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="467" name="test_add_to_pool_protected" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="453" name="test_add_to_pool_reserved" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="387" name="test_claim_already_claimed" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="372" name="test_claim_expiration_string" time="0.003"><failure message="AssertionError: datetime.datetime(2020, 3, 11, 22, 0, tzinfo=datetime.timezone.utc) != datetime.datetime(2020, 3, 11, 18, 0, tzinfo=tzfile(&apos;/usr/share/zoneinfo/EST&apos;))">self = &lt;test_tenant.TestTenant testMethod=test_claim_expiration_string&gt;

    def test_claim_expiration_string(self):
        &quot;&quot;&quot;Unclaimed Tenants may be claimed using expiration string&quot;&quot;&quot;
        tenant = Tenant(&apos;mytenant&apos;, &apos;dev&apos;)
        tenant.metadata = TenantMetadata.fresh_metadata(
            &apos;rally-dev&apos;, &apos;us-east-1&apos;, &apos;vpc-deadbeef&apos;)
    
        expected_expiration = datetime.datetime.combine(datetime.date.today(),
                                                        datetime.time(18, 0, tzinfo=gettz(&quot;EST&quot;)))
        tenant.claim(lifespan=datetime.timedelta(hours=8), expiration=tenant.parse_expiration(&quot;Today at 6pm (EST)&quot;))
        self.assertEqual(tenant.metadata.email_sent, False)
        self.assertEqual(tenant.metadata.allocated, True)
&gt;       self.assertEqual(tenant.metadata.expiration, expected_expiration)
E       AssertionError: datetime.datetime(2020, 3, 11, 22, 0, tzinfo=datetime.timezone.utc) != datetime.datetime(2020, 3, 11, 18, 0, tzinfo=tzfile(&apos;/usr/share/zoneinfo/EST&apos;))

tests/tenant/test_tenant.py:384: AssertionError</failure></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="395" name="test_claim_from_pool" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="416" name="test_claim_from_pool_but_no_pool_specfied" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="356" name="test_claim_lifespan" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="68" name="test_deploy_blacklisted_component_to_dev" time="0.004"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="84" name="test_deploy_blacklisted_component_to_int" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="51" name="test_deploy_component" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="127" name="test_deploy_component_clean" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="152" name="test_deploy_component_dry_run" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="177" name="test_deploy_component_load_test" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="101" name="test_deploy_component_verbose" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="206" name="test_deploy_stack" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="269" name="test_deploy_stack_clean" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="290" name="test_deploy_stack_dry_run" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="311" name="test_deploy_stack_load_test" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="248" name="test_deploy_stack_verbose" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="229" name="test_deploy_stack_when_stack_deploys_not_allowed" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="743" name="test_expired" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="775" name="test_expired_not_protected" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="761" name="test_expired_protected" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="334" name="test_forbid_realmless_deploys" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="691" name="test_from_dynamo_round_trip" time="0.003"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="31" name="test_init" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="46" name="test_init_default_component" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="611" name="test_k8s_var_not_set" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="593" name="test_k8s_var_set" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="576" name="test_mark_email_sent" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="587" name="test_mark_email_sent_throws_given_insufficient_metadata" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="752" name="test_not_expired" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="794" name="test_not_expired_no_expiration" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="789" name="test_not_expired_no_metadata" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="497" name="test_renew_lease" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="550" name="test_renew_lease_throws_given_insufficient_metadata" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="562" name="test_renew_lease_throws_if_new_expiration_is_past_max_lifetime" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="529" name="test_renew_lease_with_expiration_string" time="0.002"><failure message="AssertionError: datetime.datetime(2020, 3, 11, 22, 0, tzinfo=datetime.timezone.utc) != datetime.datetime(2020, 3, 11, 18, 0, tzinfo=tzfile(&apos;/usr/share/zoneinfo/EST&apos;))">self = &lt;test_tenant.TestTenant testMethod=test_renew_lease_with_expiration_string&gt;

    def test_renew_lease_with_expiration_string(self):
        &quot;&quot;&quot;Verify renew_lease extends expiration by date&quot;&quot;&quot;
        metadata_body = open(
            os.path.join(
                os.path.dirname(__file__), &apos;resources&apos;, &apos;tenant_metadata.json&apos;)).read()
    
        tenant = Tenant(
            &apos;mytenant&apos;, &apos;myrealm&apos;, metadata=TenantMetadata.from_json(metadata_body))
    
        created = datetime.datetime.combine(datetime.date.today(), datetime.time(8, 0, tzinfo=gettz(&quot;EST&quot;)))
        expected_expiration = datetime.datetime.combine(datetime.date.today(),
                                                        datetime.time(18, 0, tzinfo=gettz(&quot;EST&quot;)))
        # set created so we don&apos;t go over the max life allowed
        tenant.metadata = tenant.metadata._replace(created=created)
        tenant.renew_lease(expiration=tenant.parse_expiration(&quot;Today at 6pm (EST)&quot;))
        self.assertEqual(
            tenant.metadata.expiration,
&gt;           expected_expiration
        )
E       AssertionError: datetime.datetime(2020, 3, 11, 22, 0, tzinfo=datetime.timezone.utc) != datetime.datetime(2020, 3, 11, 18, 0, tzinfo=tzfile(&apos;/usr/share/zoneinfo/EST&apos;))

tests/tenant/test_tenant.py:547: AssertionError</failure></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="513" name="test_renew_lease_with_lifespan" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="481" name="test_reserve_already_reserved" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="623" name="test_reset_state" time="0.002"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="36" name="test_tf_data_dir" time="0.002"><system-err>2020-03-11 14:30:13,448 - rally.neptune.tenant.provisioner - INFO - Set TF_DATA_DIR env variable to a value: /var/tmp/terraform-data-dir/tf-data-tenant-test
2020-03-11 14:30:13,449 - rally.neptune.tenant.provisioner - INFO - Creating TF_DATA_DIR: /var/tmp/terraform-data-dir/tf-data-tenant-test directory.
</system-err></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="674" name="test_to_dynamo" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="731" name="test_to_dynamo_minimal_metadata" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="725" name="test_to_dynamo_no_metadata" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="655" name="test_to_json" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="667" name="test_to_json_no_metadata" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenant" file="tests/tenant/test_tenant.py" line="489" name="test_unreserve_already_unreserved" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="838" name="test_allocated" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="822" name="test_created" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="834" name="test_email_sent" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="828" name="test_expiration" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="868" name="test_fresh_metadata" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="877" name="test_fresh_metadata_overrides" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="846" name="test_lifespan" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="842" name="test_protected" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="812" name="test_string_attributes" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsing" file="tests/tenant/test_tenant.py" line="850" name="test_to_json" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsingMinimal" file="tests/tenant/test_tenant.py" line="900" name="test_allocated" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsingMinimal" file="tests/tenant/test_tenant.py" line="904" name="test_protected" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsingMinimal" file="tests/tenant/test_tenant.py" line="894" name="test_string_attributes" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant.TestTenantMetadataParsingNulls" file="tests/tenant/test_tenant.py" line="919" name="test_null_attributes" time="0.001"></testcase><testcase classname="tests.tenant.test_tenant_store" file="tests/tenant/test_tenant_store.py" name="PYLINT" time="0.001"><failure message="E:338,16: Instance of &apos;&apos; has no &apos;Table&apos; member (no-member)">E:338,16: Instance of &apos;&apos; has no &apos;Table&apos; member (no-member)</failure></testcase><testcase classname="tests.tenant.test_tenant_store" file="tests/tenant/test_tenant_store.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:13,490 - filelock - INFO - Lock 4681393296 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:13,491 - filelock - INFO - Lock 4681393296 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="548" name="test_add_to_pool" time="0.319"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_add_to_pool&gt;

    @mock_dynamodb2
    def test_add_to_pool(self):
        &quot;&quot;&quot;A tenant can be added to a pool&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:552: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x11701e650&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:13,809 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="555" name="test_add_to_pool_already_in_pool" time="0.237"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_add_to_pool_already_in_pool&gt;

    @mock_dynamodb2
    def test_add_to_pool_already_in_pool(self):
        &quot;&quot;&quot;A tenant in a pool cannot be added to a pool&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:559: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116fbcb50&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:14,295 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="562" name="test_add_to_pool_reserved" time="0.230"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_add_to_pool_reserved&gt;

    @mock_dynamodb2
    def test_add_to_pool_reserved(self):
        &quot;&quot;&quot;A reserved tenant cannot be added to a pool&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:566: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116bccf90&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:14,731 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="463" name="test_allocated_pool_tenant_names" time="0.235"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_allocated_pool_tenant_names&gt;

    @mock_dynamodb2
    def test_allocated_pool_tenant_names(self):
        &quot;&quot;&quot;Given a realm and pool, retrieve allocated tenants within&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:467: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1170e4f90&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:15,163 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="342" name="test_claim" time="0.242"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_claim&gt;

    @mock_dynamodb2
    def test_claim(self):
        &quot;&quot;&quot;Users can claim tenants&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116930cd0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:15,593 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="399" name="test_claim_limit_exempt" time="0.237"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_claim_limit_exempt&gt;

    @mock_dynamodb2
    def test_claim_limit_exempt(self):
        &quot;&quot;&quot;Service users can exceed the limit&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:403: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1169ec210&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:16,019 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="417" name="test_claim_no_room_left" time="0.227"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_claim_no_room_left&gt;

    @mock_dynamodb2
    def test_claim_no_room_left(self):
        &quot;&quot;&quot;Users can&apos;t claim tenants if all tenants are allocated&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:421: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1164d79d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:16,432 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="359" name="test_claim_specific_tenant" time="0.228"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_claim_specific_tenant&gt;

    @mock_dynamodb2
    def test_claim_specific_tenant(self):
        &quot;&quot;&quot;Users can claim specific tenants&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1164b98d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:16,856 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="569" name="test_expiration_of_tenant_added_to_pool" time="0.231"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_expiration_of_tenant_added_to_pool&gt;

    @mock_dynamodb2
    def test_expiration_of_tenant_added_to_pool(self):
        &quot;&quot;&quot;A tenant added to a pool expires twelve hours from time of add&quot;&quot;&quot;
        now = datetime.datetime.now(datetime.timezone.utc)
        expected_expiration = (now + datetime.timedelta(hours=12)).timestamp()
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:575: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x11643b290&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:17,287 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="600" name="test_fetch_from_pool" time="0.244"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_fetch_from_pool&gt;

    @mock_dynamodb2
    def test_fetch_from_pool(self):
        &quot;&quot;&quot;Given a realm, owner and pool, claim an unallocated tenant from the pool for the owner&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:604: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1163fac50&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:17,731 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="608" name="test_fetch_from_pool_specific_tenant" time="0.268"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_fetch_from_pool_specific_tenant&gt;

    @mock_dynamodb2
    def test_fetch_from_pool_specific_tenant(self):
        &quot;&quot;&quot;Given a realm, owner, pool and tenant, claim the tenant from the pool for the owner&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:612: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1163cf510&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:18,189 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="589" name="test_fetched_tenant_expiration_string" time="0.240"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_fetched_tenant_expiration_string&gt;

    @mock_dynamodb2
    def test_fetched_tenant_expiration_string(self):
        &quot;&quot;&quot;A fetched tenant will expire today at 6pm (EST)&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116370150&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:18,614 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="579" name="test_fetched_tenant_lifespan" time="0.233"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_fetched_tenant_lifespan&gt;

    @mock_dynamodb2
    def test_fetched_tenant_lifespan(self):
        &quot;&quot;&quot;A fetched tenant has a lifespan of one hour from time of fetch&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x11632ebd0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:19,048 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="616" name="test_from_pool_no_unallocated" time="0.235"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_from_pool_no_unallocated&gt;

    @mock_dynamodb2
    def test_from_pool_no_unallocated(self):
        &quot;&quot;&quot;Given an empty pool, fetch_from_pool returns None&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:620: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116313fd0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:19,450 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="493" name="test_get_all_pool_tenants_in_realm" time="0.242"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_all_pool_tenants_in_realm&gt;

    @mock_dynamodb2
    def test_get_all_pool_tenants_in_realm(self):
        &quot;&quot;&quot;Given a pool and realm, return all tenants in the pool and realm&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116385890&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:19,870 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="456" name="test_get_available_tenant_names" time="0.237"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_available_tenant_names&gt;

    @mock_dynamodb2
    def test_get_available_tenant_names(self):
        &quot;&quot;&quot;Given a realm, return a set of all unallocated, unreserved, non-pooled tenants&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:460: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116c24590&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:20,290 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="434" name="test_get_tenant" time="0.238"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenant&gt;

    @mock_dynamodb2
    def test_get_tenant(self):
        &quot;&quot;&quot;Given a tenant, retrieve it from dynamo&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:438: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x115d647d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:20,709 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="443" name="test_get_tenant_names" time="0.244"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenant_names&gt;

    @mock_dynamodb2
    def test_get_tenant_names(self):
        &quot;&quot;&quot;Given a realm, retrieve all tenant names within&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:447: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116f44510&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:21,139 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="533" name="test_get_tenants_by_owner_email" time="0.237"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenants_by_owner_email&gt;

    @mock_dynamodb2
    def test_get_tenants_by_owner_email(self):
        &quot;&quot;&quot;Given an owner email, return all tenants belonging to the owner&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:537: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1168e0990&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:21,545 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="486" name="test_get_tenants_by_pool_and_realm" time="0.240"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenants_by_pool_and_realm&gt;

    @mock_dynamodb2
    def test_get_tenants_by_pool_and_realm(self):
        &quot;&quot;&quot;Given a pool and realm, return all tenants in the pool and realm&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:490: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116f9a810&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:21,950 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="500" name="test_get_tenants_by_pool_without_realm_throws_missing_query_param_error" time="0.241"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenants_by_pool_without_realm_throws_missing_query_param_error&gt;

    @mock_dynamodb2
    def test_get_tenants_by_pool_without_realm_throws_missing_query_param_error(self):
        &quot;&quot;&quot;Given a pool but no realm, through Neptune error warning about missing query param&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:504: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116e3e750&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:22,370 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="478" name="test_get_tenants_by_realm" time="0.251"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenants_by_realm&gt;

    @mock_dynamodb2
    def test_get_tenants_by_realm(self):
        &quot;&quot;&quot;Given a pool and realm, return all tenants in the pool and realm&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:482: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116e25f50&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:22,803 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="540" name="test_get_tenants_by_reserved_email" time="0.242"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenants_by_reserved_email&gt;

    @mock_dynamodb2
    def test_get_tenants_by_reserved_email(self):
        &quot;&quot;&quot;Given an email of user with reserved tenants, return all tenants reserved for the user&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:544: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1168bb5d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:23,218 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="523" name="test_get_tenants_not_protected" time="0.717"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenants_not_protected&gt;

    @mock_dynamodb2
    def test_get_tenants_not_protected(self):
        &quot;&quot;&quot;Given a realm and protected arg, return all tenants in the pool and realm&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116fadb10&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:24,102 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="507" name="test_get_tenants_protected" time="1.391"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenants_protected&gt;

    @mock_dynamodb2
    def test_get_tenants_protected(self):
        &quot;&quot;&quot;Given a realm and protected arg, return all tenants in the pool and realm&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:511: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x1163c39d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:25,660 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="515" name="test_get_tenants_protected_in_realm" time="0.833"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_get_tenants_protected_in_realm&gt;

    @mock_dynamodb2
    def test_get_tenants_protected_in_realm(self):
        &quot;&quot;&quot;Given a realm and protected arg, return all tenants in the pool and realm&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:519: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116db5c50&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:26,665 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="654" name="test_owner_email_saved_as_lowercase_in_dynamo" time="2.264"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_owner_email_saved_as_lowercase_in_dynamo&gt;

    @mock_dynamodb2
    def test_owner_email_saved_as_lowercase_in_dynamo(self):
        &quot;&quot;&quot;Save casts tenant owner&apos;s email to lower before saving to dynamo&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:658: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116c62110&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:29,144 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="669" name="test_pool_saved_as_lowercase_in_dynamo" time="0.226"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_pool_saved_as_lowercase_in_dynamo&gt;

    @mock_dynamodb2
    def test_pool_saved_as_lowercase_in_dynamo(self):
        &quot;&quot;&quot;Save casts tenant owner&apos;s email to lower before saving to dynamo&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:673: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116ec5b50&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:29,540 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="639" name="test_realm_saved_as_lowercase_in_dynamo" time="0.245"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_realm_saved_as_lowercase_in_dynamo&gt;

    @mock_dynamodb2
    def test_realm_saved_as_lowercase_in_dynamo(self):
        &quot;&quot;&quot;Save casts realm to lower before saving to dynamo&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:643: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116c971d0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:29,956 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="684" name="test_reserved_email_saved_as_lowercase_in_dynamo" time="0.233"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_reserved_email_saved_as_lowercase_in_dynamo&gt;

    @mock_dynamodb2
    def test_reserved_email_saved_as_lowercase_in_dynamo(self):
        &quot;&quot;&quot;Save casts tenant owner&apos;s email to lower before saving to dynamo&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:688: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116f64150&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:30,361 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="624" name="test_save" time="0.232"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_save&gt;

    @mock_dynamodb2
    def test_save(self):
        &quot;&quot;&quot;Persist tenant metadata to the store&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:628: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x115ebaad0&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:30,783 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="378" name="test_tenant_cap_limit" time="0.255"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_tenant_cap_limit&gt;

    @mock_dynamodb2
    def test_tenant_cap_limit(self):
        &quot;&quot;&quot;Users can&apos;t claim tenants if they already have the max&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:382: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116872a90&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:31,209 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="tests.tenant.test_tenant_store.TestDynamoTenantStore" file="tests/tenant/test_tenant_store.py" line="470" name="test_unallocated_pool_tenant_names" time="0.239"><failure message="botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired">self = &lt;test_tenant_store.TestDynamoTenantStore testMethod=test_unallocated_pool_tenant_names&gt;

    @mock_dynamodb2
    def test_unallocated_pool_tenant_names(self):
        &quot;&quot;&quot;Given a realm and pool, retrieve unallocated, unreserved tenants within&quot;&quot;&quot;
&gt;       dynamo_store = self.create_and_populate_table(self.TENANTS_JSON)

tests/tenant/test_tenant_store.py:474: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/tenant/test_tenant_store.py:337: in create_and_populate_table
    create_table(self.dynamodb, self.table_name)
tests/tenant/test_tenant_store.py:133: in create_table
    &apos;WriteCapacityUnits&apos;: 100
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/factory.py:520: in do_action
    response = action(self, *args, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/boto3/resources/action.py:83: in __call__
    response = getattr(parent.meta.client, operation_name)(**params)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:613: in _make_api_call
    operation_model, request_dict, request_context)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:632: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request
    return self._send_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:132: in _send_request
    request = self.create_request(request_dict, operation_model)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/endpoint.py:116: in create_request
    operation_name=operation_model.name)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:356: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:228: in emit
    return self._emit(event_name, kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit
    response = handler(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:90: in handler
    return self.sign(operation_name, request)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:152: in sign
    auth = self.get_auth_instance(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/signers.py:232: in get_auth_instance
    frozen_credentials = self._credentials.get_frozen_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:591: in get_frozen_credentials
    self._refresh()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:486: in _refresh
    self._protected_refresh(is_mandatory=is_mandatory_refresh)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:502: in _protected_refresh
    metadata = self._refresh_using()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:643: in fetch_credentials
    return self._get_cached_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:653: in _get_cached_credentials
    response = self._get_credentials()
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py:786: in _get_credentials
    return client.assume_role(**kwargs)
../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:316: in _api_call
    return self._make_api_call(operation_name, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;botocore.client.STS object at 0x116f4d750&gt;, operation_name = &apos;AssumeRole&apos;
api_params = {&apos;RoleArn&apos;: &apos;arn:aws:iam::144137586169:role/aws-ops-rally-dev-admin&apos;, &apos;RoleSessionName&apos;: &apos;john.murphy@rallyhealth.com&apos;}

    def _make_api_call(self, operation_name, api_params):
        operation_model = self._service_model.operation_model(operation_name)
        service_name = self._service_model.service_name
        history_recorder.record(&apos;API_CALL&apos;, {
            &apos;service&apos;: service_name,
            &apos;operation&apos;: operation_name,
            &apos;params&apos;: api_params,
        })
        if operation_model.deprecated:
            logger.debug(&apos;Warning: %s.%s() is deprecated&apos;,
                         service_name, operation_name)
        request_context = {
            &apos;client_region&apos;: self.meta.region_name,
            &apos;client_config&apos;: self.meta.config,
            &apos;has_streaming_input&apos;: operation_model.has_streaming_input,
            &apos;auth_type&apos;: operation_model.auth_type,
        }
        request_dict = self._convert_to_request_dict(
            api_params, operation_model, context=request_context)
    
        service_id = self._service_model.service_id.hyphenize()
        handler, event_response = self.meta.events.emit_until_response(
            &apos;before-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            model=operation_model, params=request_dict,
            request_signer=self._request_signer, context=request_context)
    
        if event_response is not None:
            http, parsed_response = event_response
        else:
            http, parsed_response = self._make_request(
                operation_model, request_dict, request_context)
    
        self.meta.events.emit(
            &apos;after-call.{service_id}.{operation_name}&apos;.format(
                service_id=service_id,
                operation_name=operation_name),
            http_response=http, parsed=parsed_response,
            model=operation_model, context=request_context
        )
    
        if http.status_code &gt;= 300:
            error_code = parsed_response.get(&quot;Error&quot;, {}).get(&quot;Code&quot;)
            error_class = self.exceptions.from_code(error_code)
&gt;           raise error_class(parsed_response, operation_name)
E           botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired

../../.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py:626: ClientError</failure><system-err>2020-03-11 14:30:31,621 - botocore.credentials - WARNING - Refreshing temporary credentials failed during mandatory refresh period.
Traceback (most recent call last):
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 502, in _protected_refresh
    metadata = self._refresh_using()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 643, in fetch_credentials
    return self._get_cached_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 653, in _get_cached_credentials
    response = self._get_credentials()
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/credentials.py&quot;, line 786, in _get_credentials
    return client.assume_role(**kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 316, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File &quot;/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/botocore/client.py&quot;, line 626, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.exceptions.ClientError: An error occurred (ExpiredToken) when calling the AssumeRole operation: The security token included in the request is expired
</system-err></testcase><testcase classname="rally.__init__" file="rally/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.__init__" file="rally/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,800 - filelock - INFO - Lock 4690106064 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,801 - filelock - INFO - Lock 4690106064 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.__init__" file="rally/neptune/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.__init__" file="rally/neptune/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,803 - filelock - INFO - Lock 4688927888 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,803 - filelock - INFO - Lock 4688927888 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.__init__" file="rally/neptune/cli/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.__init__" file="rally/neptune/cli/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,806 - filelock - INFO - Lock 4689150608 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,806 - filelock - INFO - Lock 4689150608 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.allocate" file="rally/neptune/cli/allocate.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.allocate" file="rally/neptune/cli/allocate.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,809 - filelock - INFO - Lock 4677213328 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,809 - filelock - INFO - Lock 4677213328 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.build" file="rally/neptune/cli/build.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.build" file="rally/neptune/cli/build.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,811 - filelock - INFO - Lock 4681395664 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,811 - filelock - INFO - Lock 4681395664 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.claim" file="rally/neptune/cli/claim.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.claim" file="rally/neptune/cli/claim.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,814 - filelock - INFO - Lock 4674733200 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,815 - filelock - INFO - Lock 4674733200 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.configure" file="rally/neptune/cli/configure.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.configure" file="rally/neptune/cli/configure.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,818 - filelock - INFO - Lock 4674499152 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,818 - filelock - INFO - Lock 4674499152 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.deploy" file="rally/neptune/cli/deploy.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.deploy" file="rally/neptune/cli/deploy.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,821 - filelock - INFO - Lock 4667819664 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,822 - filelock - INFO - Lock 4667819664 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.describe" file="rally/neptune/cli/describe.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.describe" file="rally/neptune/cli/describe.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,824 - filelock - INFO - Lock 4678862352 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,825 - filelock - INFO - Lock 4678862352 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.destroy" file="rally/neptune/cli/destroy.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.destroy" file="rally/neptune/cli/destroy.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,828 - filelock - INFO - Lock 4669268624 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,828 - filelock - INFO - Lock 4669268624 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.list" file="rally/neptune/cli/list.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.list" file="rally/neptune/cli/list.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,832 - filelock - INFO - Lock 4677888656 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,832 - filelock - INFO - Lock 4677888656 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.local" file="rally/neptune/cli/local.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.local" file="rally/neptune/cli/local.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,835 - filelock - INFO - Lock 4679219088 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,836 - filelock - INFO - Lock 4679219088 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.manifest" file="rally/neptune/cli/manifest.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.manifest" file="rally/neptune/cli/manifest.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,839 - filelock - INFO - Lock 4667353488 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,839 - filelock - INFO - Lock 4667353488 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.notify" file="rally/neptune/cli/notify.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.notify" file="rally/neptune/cli/notify.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,843 - filelock - INFO - Lock 4678151120 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,843 - filelock - INFO - Lock 4678151120 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.pool" file="rally/neptune/cli/pool.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.pool" file="rally/neptune/cli/pool.py" name="mypy" time="0.002"><system-err>2020-03-11 14:30:31,847 - filelock - INFO - Lock 4661598096 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,847 - filelock - INFO - Lock 4661598096 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.purge" file="rally/neptune/cli/purge.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.purge" file="rally/neptune/cli/purge.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,850 - filelock - INFO - Lock 4661001296 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,851 - filelock - INFO - Lock 4661001296 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.renew" file="rally/neptune/cli/renew.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.renew" file="rally/neptune/cli/renew.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,854 - filelock - INFO - Lock 4660382032 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,854 - filelock - INFO - Lock 4660382032 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.report" file="rally/neptune/cli/report.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.report" file="rally/neptune/cli/report.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,858 - filelock - INFO - Lock 4660574480 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,858 - filelock - INFO - Lock 4660574480 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.reservation" file="rally/neptune/cli/reservation.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.reservation" file="rally/neptune/cli/reservation.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,861 - filelock - INFO - Lock 4678371280 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,861 - filelock - INFO - Lock 4678371280 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.reset" file="rally/neptune/cli/reset.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.reset" file="rally/neptune/cli/reset.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,864 - filelock - INFO - Lock 4675811600 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,865 - filelock - INFO - Lock 4675811600 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cli.version" file="rally/neptune/cli/version.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cli.version" file="rally/neptune/cli/version.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,868 - filelock - INFO - Lock 4689539600 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,868 - filelock - INFO - Lock 4689539600 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.cloudaccount.__init__" file="rally/neptune/cloudaccount/__init__.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.cloudaccount.__init__" file="rally/neptune/cloudaccount/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,872 - filelock - INFO - Lock 4689542416 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,873 - filelock - INFO - Lock 4689542416 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.command.__init__" file="rally/neptune/command/__init__.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.command.__init__" file="rally/neptune/command/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,877 - filelock - INFO - Lock 4667944400 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,877 - filelock - INFO - Lock 4667944400 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.component.__init__" file="rally/neptune/component/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.component.__init__" file="rally/neptune/component/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,880 - filelock - INFO - Lock 4667942608 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,881 - filelock - INFO - Lock 4667942608 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.config.__init__" file="rally/neptune/config/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.config.__init__" file="rally/neptune/config/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,884 - filelock - INFO - Lock 4678240080 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,884 - filelock - INFO - Lock 4678240080 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.config.deployer.__init__" file="rally/neptune/config/deployer/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.config.deployer.__init__" file="rally/neptune/config/deployer/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,887 - filelock - INFO - Lock 4686186320 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,888 - filelock - INFO - Lock 4686186320 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.config.provisioner.__init__" file="rally/neptune/config/provisioner/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.config.provisioner.__init__" file="rally/neptune/config/provisioner/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,891 - filelock - INFO - Lock 4685777104 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,891 - filelock - INFO - Lock 4685777104 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.credentialstore.__init__" file="rally/neptune/credentialstore/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.credentialstore.__init__" file="rally/neptune/credentialstore/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,895 - filelock - INFO - Lock 4677412816 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,895 - filelock - INFO - Lock 4677412816 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.deploy.__init__" file="rally/neptune/deploy/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.deploy.__init__" file="rally/neptune/deploy/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,898 - filelock - INFO - Lock 4668142224 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,898 - filelock - INFO - Lock 4668142224 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.emailer.__init__" file="rally/neptune/emailer/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.emailer.__init__" file="rally/neptune/emailer/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,911 - filelock - INFO - Lock 4680317008 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,911 - filelock - INFO - Lock 4680317008 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.manifest.__init__" file="rally/neptune/manifest/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.manifest.__init__" file="rally/neptune/manifest/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,914 - filelock - INFO - Lock 4667222096 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,914 - filelock - INFO - Lock 4667222096 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.realm.__init__" file="rally/neptune/realm/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.realm.__init__" file="rally/neptune/realm/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,917 - filelock - INFO - Lock 4678205648 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,918 - filelock - INFO - Lock 4678205648 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.realm.store" file="rally/neptune/realm/store.py" name="PYLINT" time="0.001"></testcase><testcase classname="rally.neptune.realm.store" file="rally/neptune/realm/store.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,921 - filelock - INFO - Lock 4678206288 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,922 - filelock - INFO - Lock 4678206288 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.reporting.__init__" file="rally/neptune/reporting/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.reporting.__init__" file="rally/neptune/reporting/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,925 - filelock - INFO - Lock 4680097360 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,925 - filelock - INFO - Lock 4680097360 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.stack.__init__" file="rally/neptune/stack/__init__.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.stack.__init__" file="rally/neptune/stack/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,929 - filelock - INFO - Lock 4680715920 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,929 - filelock - INFO - Lock 4680715920 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.tenant.__init__" file="rally/neptune/tenant/__init__.py" name="PYLINT" time="0.001"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.tenant.__init__" file="rally/neptune/tenant/__init__.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,933 - filelock - INFO - Lock 4677748816 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,933 - filelock - INFO - Lock 4677748816 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.tenant.provisioner" file="rally/neptune/tenant/provisioner.py" name="PYLINT" time="0.001"><failure message="E: 99,16: Instance of &apos;&apos; has no &apos;vpcs&apos; member (no-member)">E: 99,16: Instance of &apos;&apos; has no &apos;vpcs&apos; member (no-member)</failure></testcase><testcase classname="rally.neptune.tenant.provisioner" file="rally/neptune/tenant/provisioner.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,938 - filelock - INFO - Lock 4679292944 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,938 - filelock - INFO - Lock 4679292944 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase><testcase classname="rally.neptune.tenant.store" file="rally/neptune/tenant/store.py" name="PYLINT" time="0.000"><skipped message="file(s) previously passed pylint checks" type="pytest.skip">/Users/john.murphy/.local/share/virtualenvs/rally.neptune-Z49TxA9f/lib/python3.7/site-packages/pytest_pylint/plugin.py:216: file(s) previously passed pylint checks</skipped></testcase><testcase classname="rally.neptune.tenant.store" file="rally/neptune/tenant/store.py" name="mypy" time="0.001"><system-err>2020-03-11 14:30:31,942 - filelock - INFO - Lock 4678646480 acquired on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
2020-03-11 14:30:31,942 - filelock - INFO - Lock 4678646480 released on /var/folders/l9/thyjd0bx3zn3rqb2h4dh00f00000gp/T/tmpg5v1k95l.lock
</system-err></testcase></testsuite></testsuites>